{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\acteursbreakingbad\\\\src\\\\contexte\\\\BreakContexte.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport axios from \"axios\";\nimport BreakReducer from \"./BreakReducer\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BreakContexte = /*#__PURE__*/createContext();\n\nconst BreakProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [loadingbyname, setLoadingbyname] = useState(true);\n  const initialState = {\n    acteurs: [],\n    acteur: {},\n    acteurNom: {}\n  };\n  const [state, dispatch] = useReducer(BreakReducer, initialState);\n  const [name, setName] = useState(\"\");\n  const [nameSear, setNameSear] = useState(\"\");\n\n  const fetchActeurs = async () => {\n    setLoading(true);\n\n    try {\n      const response = await axios.get(\"https://api.github.com/users\"); // console.table(response.data)\n\n      dispatch({\n        type: \"GET_ACTEURS\",\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  };\n\n  const fetchActeur = async id => {\n    setLoading(true);\n    const options = {\n      method: \"GET\",\n      url: `https://moviesdatabase.p.rapidapi.com/titles/${id}/main_actors`,\n      headers: {\n        \"X-RapidAPI-Key\": \"d6b89bc6a2msh1c3504d409c851cp1470e5jsn97545f8772de\",\n        \"X-RapidAPI-Host\": \"moviesdatabase.p.rapidapi.com\"\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data);\n      dispatch({\n        type: \"GET_ACTEUR\",\n        payload: response.data\n      });\n    }).catch(function (error) {\n      console.error(error);\n    }); // try {\n    //   const response = await axios.get(\n    //     `https://www.breakingbadapi.com/api/characters/${id}`\n    //   );\n    //   dispatch({\n    //     type: \"GET_ACTEUR\",\n    //     payload: response.data[0],\n    //   });\n    //   // console.log(response.data[0])\n    // } catch (error) {\n    //   console.log(error);\n    // }\n\n    setLoading(false);\n  };\n\n  const fetchByName = async x => {\n    setLoadingbyname(true);\n\n    try {\n      const response = await axios.get(`https://www.breakingbadapi.com/api/characters?name=${x}`);\n      dispatch({\n        type: \"GET_ACTNAME\",\n        payload: response.data[0]\n      }); // console.log(response.data[0])\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoadingbyname(false);\n  };\n\n  const clearActeur = () => {\n    dispatch({\n      type: \"REMOVE_ACTEUR\"\n    });\n  };\n\n  const clearnomActeur = () => {\n    dispatch({\n      type: \"REMOVE_NOMACTEUR\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(BreakContexte.Provider, {\n    value: {\n      loading,\n      fetchActeurs,\n      acteurs: state.acteurs,\n      fetchActeur,\n      acteur: state.acteur,\n      clearActeur,\n      acteurNom: state.acteurNom,\n      fetchByName,\n      name,\n      setName,\n      clearnomActeur,\n      nameSear,\n      setNameSear,\n      loadingbyname,\n      setLoadingbyname\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BreakProvider, \"YcilkWNUv7teIL/BJa2zclXgE3c=\");\n\n_c = BreakProvider;\nexport default BreakProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreakProvider\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/acteursbreakingbad/src/contexte/BreakContexte.jsx"],"names":["React","createContext","useState","axios","BreakReducer","useReducer","BreakContexte","BreakProvider","children","loading","setLoading","loadingbyname","setLoadingbyname","initialState","acteurs","acteur","acteurNom","state","dispatch","name","setName","nameSear","setNameSear","fetchActeurs","response","get","type","payload","data","error","console","log","fetchActeur","id","options","method","url","headers","request","then","catch","fetchByName","x","clearActeur","clearnomActeur"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport BreakReducer from \"./BreakReducer\";\r\nimport { useReducer } from \"react\";\r\n\r\nexport const BreakContexte = createContext();\r\n\r\nconst BreakProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadingbyname, setLoadingbyname] = useState(true);\r\n\r\n  const initialState = {\r\n    acteurs: [],\r\n    acteur: {},\r\n    acteurNom: {},\r\n  };\r\n  const [state, dispatch] = useReducer(BreakReducer, initialState);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [nameSear, setNameSear] = useState(\"\");\r\n\r\n  const fetchActeurs = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\"https://api.github.com/users\");\r\n      // console.table(response.data)\r\n      dispatch({\r\n        type: \"GET_ACTEURS\",\r\n        payload: response.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchActeur = async (id) => {\r\n    setLoading(true);\r\n    const options = {\r\n      method: \"GET\",\r\n      url: `https://moviesdatabase.p.rapidapi.com/titles/${id}/main_actors`,\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"d6b89bc6a2msh1c3504d409c851cp1470e5jsn97545f8772de\",\r\n        \"X-RapidAPI-Host\": \"moviesdatabase.p.rapidapi.com\",\r\n      },\r\n    };\r\n\r\n    axios\r\n      .request(options)\r\n      .then(function (response) {\r\n        console.log(response.data);\r\n        dispatch({\r\n          type: \"GET_ACTEUR\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.error(error);\r\n      });\r\n    // try {\r\n    //   const response = await axios.get(\r\n    //     `https://www.breakingbadapi.com/api/characters/${id}`\r\n    //   );\r\n    //   dispatch({\r\n    //     type: \"GET_ACTEUR\",\r\n    //     payload: response.data[0],\r\n    //   });\r\n    //   // console.log(response.data[0])\r\n    // } catch (error) {\r\n    //   console.log(error);\r\n    // }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchByName = async (x) => {\r\n    setLoadingbyname(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `https://www.breakingbadapi.com/api/characters?name=${x}`\r\n      );\r\n      dispatch({\r\n        type: \"GET_ACTNAME\",\r\n        payload: response.data[0],\r\n      });\r\n      // console.log(response.data[0])\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoadingbyname(false);\r\n  };\r\n\r\n  const clearActeur = () => {\r\n    dispatch({ type: \"REMOVE_ACTEUR\" });\r\n  };\r\n  const clearnomActeur = () => {\r\n    dispatch({ type: \"REMOVE_NOMACTEUR\" });\r\n  };\r\n\r\n  return (\r\n    <BreakContexte.Provider\r\n      value={{\r\n        loading,\r\n        fetchActeurs,\r\n        acteurs: state.acteurs,\r\n        fetchActeur,\r\n        acteur: state.acteur,\r\n        clearActeur,\r\n        acteurNom: state.acteurNom,\r\n        fetchByName,\r\n        name,\r\n        setName,\r\n        clearnomActeur,\r\n        nameSear,\r\n        setNameSear,\r\n        loadingbyname,\r\n        setLoadingbyname,\r\n      }}\r\n    >\r\n      {children}\r\n    </BreakContexte.Provider>\r\n  );\r\n};\r\n\r\nexport default BreakProvider;\r\n"]},"metadata":{},"sourceType":"module"}